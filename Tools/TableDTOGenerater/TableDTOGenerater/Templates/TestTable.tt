<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using DataTransferObjects.Tables;
using Framework.WebAPI.Interfaces;
using System.Linq;

namespace WebAPITest.TestTables
{
  public class <#= Table.TableName #>Test
  {
    /// <summary>
    /// テーブル作成
    /// </summary>
    /// <param name="db">テスト用SQLiteDBインスタンス</param>
    public static void CreateTable(IDatabase db)
    {
      var sql =  @"<#= Table.GetCreateTableSQL().ToUpper() #>";

      try
      {
        // SQL発行
        db.ExecuteNonQuery(sql);
      }
      catch (Exception ex)
      {
        System.Diagnostics.Debug.WriteLine(ex.Message);
        db.Rollback();
        db.BeginTransaction();
      }
    }

    /// <summary>
    /// データ登録
    /// </summary>
    /// <param name="db">テスト用SQLiteDBインスタンス</param>
    /// <param name="targetDTO">対象DTOインスタンス</param>
    public static void Insert(IDatabase db, <#= Table.TableName #> targetDTO)
    {
      // Param設定
      db.ClearParam();
      var insertColumns = new List<string>();
<#= GetInsertSQLParams() #>

      // SQL作成
      var targetColumns = insertColumns.Where(item => item != string.Empty).ToList();
      var sql = $"INSERT INTO <#= Table.TableOriginalName #>({string.Join(',', targetColumns)}) VALUES ({string.Join(',', targetColumns.Select(item => "@" + item))});";

      // SQL発行
      db.ExecuteNonQuery(sql);

      // パラメータの設定
      string SetParam(string columnName, object columnValue)
      {
        if (columnValue == null)
        {
          return string.Empty;
        }

        if (columnValue is DateTime dt)
        {
          if (dt == DateTime.MinValue)
          {
            return string.Empty;
          }
          db.AddParam("@" + columnName, columnValue);
          return columnName;
        }

        if (columnName == null)
        {
          return string.Empty;
        }

        db.AddParam("@" + columnName, columnValue);
        return columnName;
      }
    }

    /// <summary>
    /// データ取得
    /// </summary>
    /// <param name="db">テスト用SQLiteDBインスタンス</param>
<#= GetFindMethodComments() #>
    /// <returns>検索結果リスト</returns>
    public static List<<#=Table.TableName #>> Find(IDatabase db
<#= GetFindMethodParam() #>)

    {
      var sql = new StringBuilder();
      sql.AppendLine("SELECT * FROM <#=Table.TableOriginalName #> WHERE 1=1");

      var sqlWhere = new StringBuilder();
<# 
foreach(var column in Table.Columns)
{
  var singleQuote = GetSingleQuote(column.ColumnType.Name);
#>
      if(<#= column.ColumnName #> != null)
      {
        sqlWhere.AppendLine($" AND <#= column.ColumnOriginalName.ToUpper() #> = <#= singleQuote #>{<#= column.ColumnName #>}<#= singleQuote #>");
      }
<# 
}
#>
      if(sqlWhere.ToString() != string.Empty)
      {
        sql.AppendLine($" {sqlWhere.ToString()};");
      }

      // Param設定
      db.ClearParam();

      // SQL発行
      var dt = db.Fill(sql.ToString());

      // DataTableからテーブルDTOのリストに変換
      var result = new List<<#=Table.TableName #>>();
      foreach(DataRow row in dt.Rows)
      {
        var rowData = new <#=Table.TableName #>();

<# 
foreach(var column in Table.Columns)
{
#>
        rowData.<#= column.ColumnName #> =  <#= GetDBCoumnCastString(column) #>;
<# 
}
#>
        result.Add(rowData);
      }

      return result;
    }
  }
}